# -*- coding: utf-8 -*-
"""TfidfVectorizer.py

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jIzqyWg7cL0Fg_O6Uo_u82nlMJ_gfrpz
"""

class TfidfVectorizer:
    def __init__(self):
        self.sorted_vocab = {}

    def fit(self, texts):
        self.n_texts = len(texts)
        vocabulary = OrderedDict()
        for text in texts:
            text = set(text.split())
            for word in text:
                vocabulary[word] = vocabulary.get(word, 0) + 1
        # self.vocabulary = sorted(vocabulary)
        self.vocabulary = {key: value for key, value in sorted(vocabulary.items())}
        # print(vocabulary)

    def _single_transform(self, text):
        text = text.split()
        count = {}
        for word in text:
            count[word] = count.get(word, 0) + 1
        output = []

        for word in self.vocabulary:
            tf = count.get(word, 0) / len(text)
            n_texts_with_word = self.vocabulary.get(word, 0)
            if n_texts_with_word == 0:
                idf = 0
            else:
                idf = np.log(self.n_texts / n_texts_with_word)
            output.append(tf * idf)
            # print("word =", word, " n_texts_with_word =", n_texts_with_word, " len(text) =", len(text), " count.get(word, 0) =", count.get(word, 0), ' tf =', tf, 'idf =', idf, "tf*idf =", tf*idf)
        return output

    def transform(self, texts):
        output = []
        for text in texts:
            ans = self._single_transform(text)
            output.append(ans)
        return output

    def transform1(self, X):

        X_transformed = np.zeros((len(X), self.w2v_model.wv.vector_size))
        for i, title in enumerate(X):

            title_vector = np.zeros((self.w2v_model.wv.vector_size,))
            tokens = self.re.findall(title.lower())
            for token in tokens:
                if token in self.w2v_model.wv.key_to_index:
                    title_vector += self.w2v_model.wv.get_vector(token)

            X_transformed[i] = title_vector

        return X_transformed


def read_input():
    # n1, n2 = 3, 2 #map(int, input().split())

    # train_texts = ['a1 a1 a1', 'a1 b1', 'c1'] #[input().strip() for _ in range(n1)]
    # test_texts = ['a1 c1', 'd1'] #[input().strip() for _ in range(n2)]

    n1, n2 = map(int, input().split())
    train_texts = [input().strip() for _ in range(n1)]

    test_texts = [input().strip() for _ in range(n2)]

    return train_texts, test_texts


def solution():
    train_texts, test_texts = read_input()
    vectorizer = TfidfVectorizer()
    vectorizer.fit(train_texts)
    transformed = vectorizer.transform(test_texts)

    for row in transformed:
        row_str = " ".join(map(str, np.round(row, 3)))
        print(row_str)


solution()